# OpenShift cert-manager Operator Default Configuration  
# Certificate management and TLS automation with multiple ACME providers

# Subscription configuration
subscription:
  channel: "stable-v1"
  name: "cert-manager"
  source: "redhat-operators"
  sourceNamespace: "openshift-marketplace"
  installPlanApproval: "Automatic"

# Default configuration values
defaults:
  name: "cert-manager"
  enable_cluster_issuers: true
  default_issuer_email: "admin@example.com"
  enable_fallback: true
  fallback_chain: "default"
  namespace: "cert-manager-operator"
  
  # Default timeout for configuration
  default_timeout_minutes: 60

# Cluster issuers configuration
cluster_issuers:
  enabled_issuers:
    - "letsencrypt-prod"
    - "letsencrypt-staging"
    
# Certificate examples (empty by default)
example_certificates: []

# =============================================================================
# FALLBACK CONFIGURATION
# =============================================================================

# Fallback chains for automatic provider switching
fallback_chains:
  default:
    name: "Default Multi-Provider Fallback"
    description: "Automatic fallback from Let's Encrypt to ZeroSSL to Buypass"
    steps:
      - provider: "letsencrypt-prod"
        retry_after: "5m"
        max_retries: 3
      - provider: "zerossl"  
        retry_after: "10m"
        max_retries: 2
      - provider: "buypass"
        retry_after: "15m"
        max_retries: 1
        
  commercial:
    name: "Commercial Provider Fallback"
    description: "Fallback for commercial/enterprise use"
    steps:
      - provider: "sslcom"
        retry_after: "5m"
        max_retries: 3
      - provider: "letsencrypt-prod"
        retry_after: "10m"
        max_retries: 2

# Fallback triggers - when to trigger fallback to next provider
fallback_triggers:
  rate_limit:
    enabled: true
    acme_errors:
      - "urn:ietf:params:acme:error:rateLimited"
      - "rate limit"
      - "too many certificates"
    conditions:
      - "Rate limit exceeded"
      - "Weekly limit reached"
    retry_after: "1h"
    
  server_error:
    enabled: true
    acme_errors:
      - "urn:ietf:params:acme:error:serverInternal"
      - "urn:ietf:params:acme:error:connection"
    conditions:
      - "ACME server unavailable"
      - "Connection timeout"
      - "Internal server error"
    retry_after: "5m"
    
  dns_failure:
    enabled: true
    acme_errors:
      - "dns"
      - "urn:ietf:params:acme:error:dns"
    conditions:
      - "DNS validation failed"
      - "DNS propagation timeout"
    retry_after: "15m"

# ACME Providers Configuration
acme_providers:
  # Let's Encrypt Production (Primary/Default)
  letsencrypt-prod:
    name: "letsencrypt-prod"
    server: "https://acme-v02.api.letsencrypt.org/directory"
    description: "Let's Encrypt Production (Rate Limited)"
    rate_limits: "50 certificates per week per domain"
    enabled: true
    default: true
    requires_eab: false
    fallback_priority: 1  # Highest priority in fallback chains
    
  # Let's Encrypt Staging (Testing)
  letsencrypt-staging:
    name: "letsencrypt-staging"
    server: "https://acme-staging-v02.api.letsencrypt.org/directory"
    description: "Let's Encrypt Staging (For Testing)"
    rate_limits: "No rate limits"
    enabled: true
    default: false
    requires_eab: false
    fallback_priority: 1  # Primary for staging environments
    
  # ZeroSSL (Free alternative) - Requires EAB - CONFIGURED IN CREDENTIAL TEMPLATE
  zerossl:
    name: "zerossl"
    server: "https://acme.zerossl.com/v2/DV90"
    description: "ZeroSSL Free Certificates (EAB from Template)"
    rate_limits: "3 certificates per domain per day"
    enabled: false  # Set to true to enable
    default: false
    requires_eab: true
    fallback_priority: 2  # Second choice in fallback
    # Secret names are auto-generated by the operator
    secret_name: "zerossl-eab-credentials"
    documentation: |
      ZeroSSL EAB credentials are automatically sourced from environment variables
      No configuration required in deployment YAML - yamlforge reads the template automatically.
      
      To use ZeroSSL:
      1. Get EAB credentials from https://app.zerossl.com/
      2. Set environment variables: ZEROSSL_EAB_KID and ZEROSSL_EAB_HMAC
      3. Enable this provider: set enabled: true
    
  # Buypass (Norwegian CA)
  buypass:
    name: "buypass"
    server: "https://api.buypass.com/acme/directory"
    description: "Buypass ACME CA"
    rate_limits: "5 certificates per domain per day"
    enabled: false
    default: false
    requires_eab: false
    fallback_priority: 3  # Third choice in fallback
    
  # SSL.com (Requires EAB) - CONFIGURED IN CREDENTIAL TEMPLATE
  sslcom:
    name: "sslcom"
    server: "https://acme.ssl.com/sslcom-dv-rsa"
    description: "SSL.com ACME CA (EAB from Template)"
    rate_limits: "Check SSL.com documentation"
    enabled: false  # Set to true to enable
    default: false
    requires_eab: true
    fallback_priority: 1  # High priority for commercial use
    # Secret names are auto-generated by the operator
    secret_name: "sslcom-eab-credentials"
    documentation: |
      SSL.com EAB credentials are automatically sourced from environment variables
      No configuration required in deployment YAML - yamlforge reads the template automatically.
      
      To use SSL.com:
      1. Get EAB credentials from SSL.com support
      2. Set environment variables: SSLCOM_EAB_KID and SSLCOM_EAB_HMAC
      3. Enable this provider: set enabled: true
    
  # Google Trust Services (Google's CA)
  google:
    name: "google"
    server: "https://dv.acme-v02.api.pki.goog/directory"
    description: "Google Trust Services"
    rate_limits: "Check Google documentation"
    enabled: false
    default: false
    requires_eab: false
    fallback_priority: 4  # Lower priority

# DNS-01 Solver Configuration (for wildcard certificates)
dns_solvers:
  route53:
    enabled: false
    provider: "route53"
    credentials_secret: "route53-credentials"
    region: "us-east-1"
    
  cloudflare:
    enabled: false
    provider: "cloudflare"
    credentials_secret: "cloudflare-credentials"
    
  google_dns:
    enabled: false
    provider: "clouddns"
    credentials_secret: "google-dns-credentials"
    project: "your-project-id" 