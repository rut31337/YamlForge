---
# Auto Flavor Discovery Example
# Demonstrates automatic flavor recommendation based on exact hardware requirements

yamlforge:
  cloud_workspace:
    name: "auto-flavor-discovery"
    description: "Automatic flavor recommendation based on hardware specs"

  instances:
    # Example 1: CPU + Memory requirements -> Find closest flavor
    - name: "auto-flavor-cpu-memory"
      provider: "cheapest"
      cores: 4
      memory: 16384        # 16GB
      find_flavor: true    # ðŸ†• Auto-find closest matching flavor
      region: "us-east-1"
      image: "RHEL9-latest"
      tags:
        discovery_type: "cpu_memory_only"
        use_case: "general_compute"

    # Example 2: CPU + Memory + GPU requirements -> Find closest GPU flavor
    - name: "auto-flavor-gpu-basic"
      provider: "cheapest"
      cores: 8
      memory: 32768        # 32GB
      gpu_count: 1
      find_flavor: true    # ðŸ†• Auto-find closest GPU flavor
      region: "us-west-2"
      image: "RHEL9-latest"
      tags:
        discovery_type: "gpu_basic"
        use_case: "ml_training"

    # Example 3: CPU + Memory + Specific GPU type -> Find closest specific GPU flavor
    - name: "auto-flavor-gpu-specific"
      provider: "cheapest"
      cores: 16
      memory: 65536        # 64GB
      gpu_count: 1
      gpu_type: "NVIDIA T4"
      find_flavor: true    # ðŸ†• Auto-find closest T4 flavor
      region: "eu-west-1"
      image: "RHEL9-latest"
      tags:
        discovery_type: "gpu_specific"
        use_case: "ml_inference"

    # Example 4: High-end requirements -> Find closest high-end flavor
    - name: "auto-flavor-high-end"
      provider: "cheapest"
      cores: 32
      memory: 131072       # 128GB
      gpu_count: 2
      gpu_type: "NVIDIA A100"
      find_flavor: true    # ðŸ†• Auto-find closest A100 flavor
      region: "us-central-1"
      image: "RHEL9-latest"
      tags:
        discovery_type: "high_end"
        use_case: "research_cluster"

    # Example 5: Memory-intensive workload -> Find closest memory-optimized flavor
    - name: "auto-flavor-memory-intensive"
      provider: "cheapest"
      cores: 8
      memory: 65536        # 64GB (high memory-to-CPU ratio)
      find_flavor: true    # ðŸ†• Auto-find closest memory flavor
      region: "us-east-1"
      image: "RHEL9-latest"
      tags:
        discovery_type: "memory_intensive"
        use_case: "database"

    # Example 6: Minimal requirements -> Find smallest suitable flavor
    - name: "auto-flavor-minimal"
      provider: "cheapest"
      cores: 1
      memory: 2048         # 2GB
      find_flavor: true    # ðŸ†• Auto-find smallest flavor
      region: "us-west-2"
      image: "RHEL9-latest"
      tags:
        discovery_type: "minimal"
        use_case: "development"

    # Example 7: Compare auto-discovery vs manual flavor selection
    - name: "manual-flavor-comparison"
      provider: "cheapest"
      size: "large"        # Manual flavor selection for comparison
      region: "us-east-1"
      image: "RHEL9-latest"
      tags:
        discovery_type: "manual_comparison"
        use_case: "comparison_test"

    # Example 8: Multi-GPU workload -> Find closest multi-GPU flavor
    - name: "auto-flavor-multi-gpu"
      provider: "cheapest"
      cores: 48
      memory: 196608       # 192GB
      gpu_count: 4
      gpu_type: "NVIDIA A100"
      find_flavor: true    # ðŸ†• Auto-find closest multi-GPU flavor
      region: "us-west-2"
      image: "RHEL9-latest"
      tags:
        discovery_type: "multi_gpu"
        use_case: "distributed_training"

  tags:
    project: "auto-flavor-discovery-demo"
    feature: "flavor_recommendation"
    managed_by: "yamlforge"

# Expected outputs:
# - System should recommend appropriate generic flavors (e.g., medium, large, gpu_large)
# - Users get reusable flavor names they can use in future deployments
# - Clear mapping between requirements and recommended flavors
# - Cost analysis using the recommended flavors 