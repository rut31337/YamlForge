---
yamlforge:
  cloud_workspace:
    name: 3tier-demo
    description: Simple 3-tier architecture demonstration
    tags:
      architecture: 3tier
      environment: demo
  security_groups:
    web-sg:
      description: Web tier security group - public facing
      rules:
      - protocol: tcp
        port: 80
        source: 0.0.0.0/0
        description: HTTP from internet
      - protocol: tcp
        port: 443
        source: 0.0.0.0/0
        description: HTTPS from internet
      - protocol: tcp
        port: 22
        source: 10.0.0.0/16
        description: SSH from VPC
    app-sg:
      description: Application tier security group - internal
      rules:
      - protocol: tcp
        port: 8080
        source: 10.0.1.0/24
        description: HTTP from web tier subnet
      - protocol: tcp
        port: 8443
        source: 10.0.1.0/24
        description: HTTPS from web tier subnet
      - protocol: tcp
        port: 22
        source: 10.0.0.0/16
        description: SSH from VPC
    db-sg:
      description: Database tier security group - restricted
      rules:
      - protocol: tcp
        port: 3306
        source: 10.0.3.0/24
        description: MySQL from app tier subnet
      - protocol: tcp
        port: 5432
        source: 10.0.3.0/24
        description: PostgreSQL from app tier subnet
      - protocol: tcp
        port: 22
        source: 10.0.0.0/16
        description: SSH from VPC
  instances:
  - name: web-server-1
    provider: aws
    image: rhel9-latest
    size: small
    region: us-east-1
    networking:
      public: true
    subnet: web-subnet
    security_groups:
    - web-sg
    user_data: '#!/bin/bash

      dnf update -y

      dnf install -y httpd

      systemctl start httpd

      systemctl enable httpd


      # Simple web page with proxy to app tier

      cat > /var/www/html/index.html << EOF

      <html>

      <head><title>3-Tier Demo - Web Tier</title></head>

      <body>

      <h1>Web Tier - Frontend</h1>

      <p>This is the presentation layer of our 3-tier architecture.</p>

      <p>Server: $(hostname)</p>

      <p>Region: us-east-1</p>

      <p><a href="/app">Connect to Application Tier</a></p>

      </body>

      </html>

      EOF


      # Configure reverse proxy to app servers

      cat > /etc/httpd/conf.d/proxy.conf << EOF

      LoadModule proxy_module modules/mod_proxy.so

      LoadModule proxy_http_module modules/mod_proxy_http.so


      ProxyPass /app http://app-server-1:8080/

      ProxyPassReverse /app http://app-server-1:8080/

      EOF


      systemctl restart httpd

      '
    tags:
      Tier: Web
      Role: Frontend
      Environment: Demo
  - name: app-server-1
    provider: aws
    image: rhel9-latest
    size: small
    region: us-east-1
    networking:
      public: false
    subnet: app-subnet
    security_groups:
    - app-sg
    user_data: "#!/bin/bash\ndnf update -y\ndnf install -y python3 python3-pip\n\n\
      # Create simple app service\nmkdir -p /opt/app\ncat > /opt/app/app.py << EOF\n\
      #!/usr/bin/env python3\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\n\
      import socket\nimport subprocess\n\nclass AppHandler(BaseHTTPRequestHandler):\n\
      \    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type',\
      \ 'text/html')\n        self.end_headers()\n        hostname = socket.gethostname()\n\
      \        \n        # Simulate database connection\n        db_status = \"Connected\
      \ to Database Tier\"\n        \n        response = f\"\"\"\n        <html>\n\
      \        <head><title>3-Tier Demo - Application Tier</title></head>\n      \
      \  <body>\n        <h1>Application Tier - Business Logic</h1>\n        <p>This\
      \ is the application/logic layer.</p>\n        <p>Server: {hostname}</p>\n \
      \       <p>Processing business logic...</p>\n        <p>Database Status: {db_status}</p>\n\
      \        <p><a href=\"/\">Back to Web Tier</a></p>\n        </body>\n      \
      \  </html>\n        \"\"\"\n        self.wfile.write(response.encode())\n\n\
      if __name__ == \"__main__\":\n    server = HTTPServer(('0.0.0.0', 8080), AppHandler)\n\
      \    print(\"Application server starting on port 8080...\")\n    server.serve_forever()\n\
      EOF\n\nchmod +x /opt/app/app.py\n\n# Create systemd service\ncat > /etc/systemd/system/app.service\
      \ << EOF\n[Unit]\nDescription=3-Tier Demo Application\nAfter=network.target\n\
      \n[Service]\nType=simple\nUser=root\nWorkingDirectory=/opt/app\nExecStart=/usr/bin/python3\
      \ /opt/app/app.py\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n\
      EOF\n\nsystemctl enable app.service\nsystemctl start app.service\n"
    tags:
      Tier: Application
      Role: BusinessLogic
      Environment: Demo
  - name: db-server-1
    provider: aws
    image: rhel9-latest
    size: small
    region: us-east-1
    networking:
      public: false
    subnet: db-subnet
    security_groups:
    - db-sg
    user_data: '#!/bin/bash

      dnf update -y

      dnf install -y mariadb-server

      systemctl start mariadb

      systemctl enable mariadb


      # Secure installation

      mysql -e "UPDATE mysql.user SET Password = PASSWORD(''demo123'') WHERE User
      = ''root''"

      mysql -e "DELETE FROM mysql.user WHERE User = ''''"

      mysql -e "DELETE FROM mysql.user WHERE User = ''root'' AND Host NOT IN (''localhost'',
      ''127.0.0.1'', ''::1'')"

      mysql -e "DROP DATABASE IF EXISTS test"

      mysql -e "DELETE FROM mysql.db WHERE Db = ''test'' OR Db = ''test\\_%''"

      mysql -e "FLUSH PRIVILEGES"


      # Create demo database and user for app servers

      mysql -u root -pdemo123 -e "CREATE DATABASE demo_app"

      mysql -u root -pdemo123 -e "CREATE USER ''appuser''@''%'' IDENTIFIED BY ''apppass123''"

      mysql -u root -pdemo123 -e "GRANT ALL PRIVILEGES ON demo_app.* TO ''appuser''@''%''"

      mysql -u root -pdemo123 -e "CREATE TABLE demo_app.users (id INT AUTO_INCREMENT
      PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), created_at TIMESTAMP DEFAULT
      CURRENT_TIMESTAMP)"

      mysql -u root -pdemo123 -e "INSERT INTO demo_app.users (name, email) VALUES
      (''Demo User'', ''demo@example.com''), (''Test User'', ''test@example.com'')"

      mysql -u root -pdemo123 -e "FLUSH PRIVILEGES"


      # Configure MariaDB to accept connections from app tier

      sed -i ''s/bind-address.*/bind-address = 0.0.0.0/'' /etc/my.cnf.d/mariadb-server.cnf

      systemctl restart mariadb

      '
    tags:
      Tier: Database
      Role: DataStorage
      Environment: Demo
  tags:
    project: 3tier-demo
    architecture: 3tier
    environment: demo
    managed_by: yamlforge
