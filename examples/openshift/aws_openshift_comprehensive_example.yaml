---
yamlforge:
  cloud_workspace:
    name: aws-openshift-platform
    description: Complete OpenShift platform deployment on AWS with ROSA, operators,
      and applications
    tags:
      environment: production
      project: openshift-platform
      owner: platform-team
      cost_center: infrastructure
      guid: aws01
  instances:
  - name: openshift-jumphost
    provider: aws
    flavor: medium
    image: RHEL9-latest
    region: us-east-1
    availability_zone: us-east-1a
    security_groups:
    - management
    - ssh
    tags:
      role: jumphost
      cluster_support: openshift
    user_data_script: '#!/bin/bash

      # Install OpenShift CLI tools

      yum update -y

      yum install -y curl wget git jq unzip


      # Install OpenShift CLI

      curl -L https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable/openshift-client-linux.tar.gz
      | tar -xz -C /usr/local/bin/

      chmod +x /usr/local/bin/oc


      # Install kubectl

      curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

      install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl


      # Install AWS CLI v2

      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"

      unzip awscliv2.zip

      ./aws/install


      # Install ROSA CLI

      curl -L https://mirror.openshift.com/pub/openshift-v4/clients/rosa/latest/rosa-linux.tar.gz
      | tar -xz -C /usr/local/bin/

      chmod +x /usr/local/bin/rosa


      # Install Helm

      curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash


      # Install Tekton CLI

      curl -LO https://github.com/tektoncd/cli/releases/latest/download/tkn_$(uname
      -s)_$(uname -m).tar.gz

      tar xzf tkn_$(uname -s)_$(uname -m).tar.gz -C /usr/local/bin/ tkn

      '
  - name: cicd-worker
    provider: aws
    flavor: large
    image: RHEL9-latest
    region: us-east-1
    availability_zone: us-east-1b
    security_groups:
    - management
    - build
    tags:
      role: cicd
      workload: builds
    user_data_script: '#!/bin/bash

      yum update -y

      yum install -y docker podman buildah skopeo

      systemctl enable --now docker

      usermod -aG docker ec2-user

      '
  openshift_clusters:
  - name: production-rosa-hcp
    type: rosa-hcp
    provider: aws
    region: us-east-1
    version: "4.15.12"
    size: large
    worker_count: 4
    min_replicas: 3
    max_replicas: 10
    auto_scaling:
      enabled: true
      min_replicas: 3
      max_replicas: 10
    machine_pools:
    - name: production-workers
      replicas: 4
      min_replicas: 3
      max_replicas: 10
      instance_type: m5.xlarge
      availability_zones:
      - us-east-1a
      - us-east-1b
      - us-east-1c
    networking:
      machine_cidr: 10.0.0.0/16
      service_cidr: 172.30.0.0/16
      pod_cidr: 10.128.0.0/14
      host_prefix: 23
    security:
      private_cluster: false
      enable_fips: false
      additional_trust_bundle: '-----BEGIN CERTIFICATE-----

        # Custom CA certificate if needed

        -----END CERTIFICATE-----

        '
    features:
      monitoring: true
      logging: true
      private_link: true
      multi_az: true
    tags:
      environment: production
      cluster_type: rosa-hcp
      criticality: high
  - name: development-rosa-classic
    type: rosa-classic
    provider: aws
    region: us-west-2
    version: "4.14.15"
    size: medium
    worker_count: 3
    machine_pools:
    - name: dev-workers
      replicas: 3
      instance_type: m5.large
      availability_zones:
      - us-west-2a
      - us-west-2b
      - us-west-2c
    networking:
      machine_cidr: 10.1.0.0/16
    features:
      monitoring: true
      logging: false
    tags:
      environment: development
      cluster_type: rosa-classic
      criticality: low
  openshift_operators:
  - type: monitoring
    name: cluster-monitoring-stack
    target_cluster: production-rosa-hcp
    namespace: openshift-monitoring
    prometheus:
      retention: 30d
      storage_class: gp3-csi
      storage_size: 50Gi
      resources:
        requests:
          cpu: 500m
          memory: 2Gi
        limits:
          cpu: '2'
          memory: 4Gi
    grafana:
      enabled: true
      storage_size: 10Gi
      admin_password: secure-password-123
    alertmanager:
      storage_size: 10Gi
      config: "global:\n  slack_api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'\n\
        route:\n  group_by: ['alertname']\n  group_wait: 10s\n  group_interval: 10s\n\
        \  repeat_interval: 1h\n  receiver: 'web.hook'\nreceivers:\n- name: 'web.hook'\n\
        \  slack_configs:\n  - channel: '#alerts'\n    title: 'OpenShift Alert'\n"
  - type: logging
    name: cluster-logging-stack
    target_cluster: production-rosa-hcp
    namespace: openshift-logging
    log_store:
      type: elasticsearch
      storage_class: gp3-csi
      storage_size: 200Gi
      redundancy_policy: SingleRedundancy
    collection:
      type: fluentd
      resources:
        limits:
          memory: 736Mi
        requests:
          cpu: 100m
          memory: 736Mi
    visualization:
      type: kibana
      replicas: 2
  - type: service-mesh
    name: istio-system
    target_cluster: production-rosa-hcp
    namespace: istio-system
    control_plane:
      version: v2.4
      security:
        data_plane:
          mtls: true
      tracing:
        type: Jaeger
      addons:
        grafana:
          enabled: true
        prometheus:
          enabled: true
        kiali:
          enabled: true
    gateways:
    - name: main-gateway
      hosts:
      - '*.apps.production-rosa-hcp.example.com'
  - type: gitops
    name: openshift-gitops
    target_cluster: production-rosa-hcp
    namespace: openshift-gitops
    repositories:
    - url: https://github.com/your-org/openshift-manifests
      path: production/
      target_revision: main
    - url: https://github.com/your-org/helm-charts
      path: charts/
      target_revision: main
    applications:
    - name: production-apps
      source:
        repo_url: https://github.com/your-org/openshift-manifests
        path: applications/
      destination:
        server: https://kubernetes.default.svc
        namespace: production
  - type: pipelines
    name: tekton-pipelines
    target_cluster: production-rosa-hcp
    namespace: openshift-pipelines
    triggers:
      enabled: true
    chains:
      enabled: true
    hub:
      enabled: true
  - type: cert-manager
    name: automated-certificates
    target_cluster: production-rosa-hcp
    namespace: cert-manager
    default_issuer_email: platform-team@company.com
    enabled_acme_providers:
    - letsencrypt-prod
    - letsencrypt-staging
    cluster_issuers:
    - name: letsencrypt-prod
      acme:
        server: https://acme-v02.api.letsencrypt.org/directory
        private_key_secret: letsencrypt-prod
        solvers:
        - http01:
            ingress:
              class: nginx
  - type: backup
    name: cluster-backup
    target_cluster: production-rosa-hcp
    namespace: openshift-adp
    backup_locations:
    - name: aws-backup
      provider: aws
      bucket: openshift-cluster-backups
      region: us-east-1
    volume_snapshot_locations:
    - name: aws-snapshots
      provider: aws
      region: us-east-1
    backup_schedules:
    - name: daily-backup
      schedule: 0 1 * * *
      include_namespaces:
      - production
      - staging
      ttl: 720h
  - type: monitoring
    name: rhacm
    target_cluster: production-rosa-hcp
    namespace: open-cluster-management
    managed_clusters:
    - name: development-rosa-classic
      auto_import: true
    policies:
    - name: security-policy
      categories:
      - AC-Access Control
      controls:
      - AC-3
      standards:
      - NIST-CSF
  openshift_applications:
  - name: web-frontend
    target_cluster: production-rosa-hcp
    namespace: production
    deployment:
      replicas: 3
      strategy:
        type: RollingUpdate
        rolling_update:
          max_surge: 1
          max_unavailable: 1
      containers:
      - name: web
        image: nginx:1.25
        ports:
        - 80
        - 443
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
      env:
        API_URL: https://api.production-rosa-hcp.example.com
        ENVIRONMENT: production
    service:
      type: ClusterIP
      ports:
      - port: 80
        target_port: 80
    route:
      host: web.apps.production-rosa-hcp.example.com
      tls:
        termination: edge
    horizontal_pod_autoscaler:
      min_replicas: 3
      max_replicas: 10
      target_cpu_utilization: 70
  - name: api-backend
    target_cluster: production-rosa-hcp
    namespace: production
    deployment:
      replicas: 2
      containers:
      - name: api
        image: node:18-alpine
        ports:
        - 3000
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: '1'
            memory: 1Gi
      env:
        NODE_ENV: production
        DB_HOST: postgresql.production.svc.cluster.local
    service:
      type: ClusterIP
      ports:
      - port: 3000
        target_port: 3000
  - name: postgresql-database
    target_cluster: production-rosa-hcp
    namespace: production
    deployment:
      replicas: 1
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - 5432
        env:
          POSTGRES_DB: appdb
          POSTGRES_USER: appuser
          POSTGRES_PASSWORD: secure-db-password
      storage:
        size: 100Gi
        storage_class: gp3-csi
        mount_path: /var/lib/postgresql/data
    service:
      type: ClusterIP
      ports:
      - port: 5432
        target_port: 5432
  - name: redis-cache
    target_cluster: production-rosa-hcp
    namespace: production
    deployment:
      replicas: 1
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - 6379
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
  security_groups:
  - name: management
    description: Management access for OpenShift administrators
    rules:
    - direction: ingress
      protocol: tcp
      port_range: '22'
      source: 10.0.0.0/8
    - direction: ingress
      protocol: tcp
      port_range: '443'
      source: 0.0.0.0/0
  - name: ssh
    description: SSH access for jump host
    rules:
    - direction: ingress
      protocol: tcp
      port_range: '22'
      source: 0.0.0.0/0
  - name: build
    description: Build and CI/CD traffic
    rules:
    - direction: ingress
      protocol: tcp
      port_range: 8080-8090
      source: 10.0.0.0/16
  tags:
    project: openshift-platform
    environment: production
    owner: platform-team
    cost_center: infrastructure
    backup: required
    compliance: required
